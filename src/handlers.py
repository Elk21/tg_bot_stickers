from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from src.openai_utils import generate_image_from_description
from src.image_utils import convert_image_to_sticker
import httpx
import tempfile
from src.storage import user_sticker_packs, save_data
from config import TELEGRAM_BOT_TOKEN
import os

# async def start(update: Update, context: CallbackContext) -> None:
#     await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º —Å—Ç–∏–∫–µ—Ä.')

# async def handle_message(update: Update, context: CallbackContext) -> None:
#     description = update.message.text
#     await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏–∫–µ—Ä –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}')
#     image = generate_image_from_description(description)
#     sticker = convert_image_to_sticker(image)
#     await update.message.reply_sticker(sticker) 
async def start(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä.")
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –±—ã–ª

async def generate_sticker(update: Update, context: CallbackContext) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫"""
    user_id = str(update.message.from_user.id)

    # ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    context.user_data.clear()

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    description = update.message.text
    await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏–∫–µ—Ä –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}')
    image = generate_image_from_description(description)

    # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–∫–µ—Ä
    sticker_io = convert_image_to_sticker(image)

    # üîπ –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix=".webp", delete=False) as temp_file:
        temp_file.write(sticker_io.getvalue())
        temp_file_path = temp_file.name
    
    # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ context.user_data
    context.user_data["sticker_path"] = temp_file_path

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    with open(temp_file_path, "rb") as sticker_file:
        await update.message.reply_sticker(sticker_file)
    
    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
    if user_id in user_sticker_packs and user_sticker_packs[user_id]:
        available_packs = "\n".join(user_sticker_packs[user_id].keys())
        await update.message.reply_text(f"‚úÖ –°—Ç–∏–∫–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫:\n{available_packs}\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        return 1  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
    else:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:")
        return 2  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞

async def add_sticker(update: Update, context: CallbackContext) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
    user_id = str(update.message.from_user.id)
    sticker_path = context.user_data.get("sticker_path")
    sticker_set_name = context.user_data.get("sticker_set_name")

    if not sticker_path or not sticker_set_name:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    async with httpx.AsyncClient() as client:
        with open(sticker_path, "rb") as sticker_file:
            response = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/addStickerToSet",
                data={"user_id": user_id, "name": sticker_set_name, "emojis": "üî•"},
                files={"png_sticker": sticker_file}
            )

    result = response.json()
    if result.get("ok", False):
        user_sticker_packs[user_id][sticker_set_name]["stickers"].append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω")
        save_data()
        await update.message.reply_text(f"‚úÖ –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫! [–û—Ç–∫—Ä—ã—Ç—å](https://t.me/addstickers/{sticker_set_name})", parse_mode="MarkdownV2")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä.")
    
    os.remove(sticker_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    return ConversationHandler.END

async def create_new_pack(update: Update, context: CallbackContext) -> int:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫"""
    user_id = str(update.message.from_user.id)
    pack_name = update.message.text.strip()
    sticker_set_name = f"{pack_name}_by_genstickerbot"
    context.user_data["sticker_set_name"] = sticker_set_name

    await update.message.reply_text(f"–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: {pack_name}...")
    sticker_path = context.user_data.get("sticker_path")
    if not sticker_path:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    async with httpx.AsyncClient() as client:
        with open(sticker_path, "rb") as sticker_file:
            response = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/createNewStickerSet",
                data={
                    "user_id": user_id,
                    "name": sticker_set_name,
                    "title": pack_name,
                    "emojis": "üî•",
                    "sticker_format": "static",
                },
                files={"png_sticker": sticker_file}
            )

    result = response.json()
    if result.get("ok", False):
        user_sticker_packs.setdefault(user_id, {})[sticker_set_name] = {"name": pack_name, "stickers": []}
        save_data()
        await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–æ–∑–¥–∞–Ω: [{pack_name}](https://t.me/addstickers/{sticker_set_name})", parse_mode="MarkdownV2")
        return await add_sticker(update, context)
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {result.get('description')}")
        return ConversationHandler.END